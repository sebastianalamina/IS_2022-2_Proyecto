generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum estadoorden {
  RECIBIDA
  EN_PROCESO
  EN_CAMINO
  ENTREGADA
}

model administrador {
  idadmin       Int         @id @default(autoincrement())
  idrestaurante Int?         @unique
  idusuario     Int         @unique
  restaurante   restaurante? @relation(fields: [idrestaurante], references: [idrestaurante], onDelete: Cascade, map: "fk_admin")
  usuario       usuario     @relation(fields: [idusuario], references: [idusuario], onDelete: Cascade, map: "fk_usuario")
  mesero        mesero[]
}

//eliminé atributos comunes
model cliente {
  idcliente Int      @id @default(autoincrement())
  idusuario Int      @unique
  usuario   usuario? @relation(fields: [idusuario], references: [idusuario], onDelete: Cascade, map: "fk_usuario")
  resena    resena[]
  orden     orden[]
}

//eliminé cocinero y sus apariciones en otras tablas

//crear tabla orden
model orden {
  idorden       Int                @id @default(autoincrement())
  idmesa        Int
  idrestaurante Int?
  idcliente     Int?
  domicilio     String?
  estado        estadoorden
  esCarrito     Boolean
  pagado        Boolean
  costo         Int
  cliente       cliente?            @relation(fields: [idcliente], references: [idcliente], onDelete: Cascade, onUpdate: Cascade, map: "fk,orden3")
  mesa          mesa?              @relation(fields: [idmesa], references: [idmesa], onDelete: Cascade, map: "fk_orden1")
  restaurante   restaurante?       @relation(fields: [idrestaurante], references: [idrestaurante], onDelete: Cascade, map: "fk_orden2")
  contenido     contenidoorden[]
  entrega       entregadomicilio
}


//quité orden normal y orden envio
//agregué orden
model contenidoorden {
  idcontenidoorden Int       @id @default(autoincrement())
  idorden          Int
  idplatillo       Int?
  orden            orden?    @relation(fields: [idorden], references: [idorden], onDelete: Cascade, onUpdate: Cascade, map: "fk_contenido1")
  platillo         platillo? @relation(fields: [idplatillo], references: [idplatillo], onDelete: Cascade, map: "fk_contenido3")
}

model entregadomicilio {
  identregadomicilio Int        @id @default(autoincrement())
  idrepartidor       Int
  idorden            Int
  orden              orden      @relation(fields: [idorden], references: [idorden], onDelete: Cascade, onUpdate: Cascade, map: "fk_or2")
  repartidor         repartidor @relation(fields: [idrepartidor], references: [idrepartidor], onDelete: Cascade, map: "fk_or1")
}

model menu {
  idmenu        Int         @id @default(autoincrement())
  idrestaurante Int
  restaurante   restaurante @relation(fields: [idrestaurante], references: [idrestaurante], onDelete: Cascade, map: "fk_menu1")
  platillo      platillo[]
}

//quité atributos comunes
model mesero {
  idmesero      Int           @id @default(autoincrement())
  idadmin       Int
  idrestaurante Int
  idusuario     Int           @unique
  administrador administrador @relation(fields: [idadmin], references: [idadmin], onDelete: Cascade, map: "fk_mesero1")
  restaurante   restaurante   @relation(fields: [idrestaurante], references: [idrestaurante], onDelete: Cascade, map: "fk_mesero2")
  usuario       usuario       @relation(fields: [idusuario], references: [idusuario], onDelete: Cascade, map: "fk_usuario")
}

model platillo {
  idplatillo     Int              @id @default(autoincrement())
  idmenu         Int
  idrestaurante  Int
  img            String?           @db.VarChar(1000)
  nombre         String           @db.VarChar(100)
  costo          Int
  menu           menu             @relation(fields: [idmenu], references: [idmenu], onDelete: Cascade, map: "fk_paltillo1")
  contenidoorden contenidoorden[]
}

model repartidor {
  idrepartidor     Int                @id @default(autoincrement())
  idusuario        Int
  usuario          usuario?           @relation(fields: [idusuario], references: [idusuario], onDelete: Cascade, map: "fk_usuario")
  entregadomicilio entregadomicilio[]
}

//Quitar "cocinero" de aquí
model restaurante {
  idrestaurante Int             @id @default(autoincrement())
  nombre        String?         @db.VarChar(100)
  estado        String?         @db.VarChar(100)
  calle         String?         @db.VarChar(100)
  numero        Int?
  cp            Int?
  municipio     String?         @db.VarChar(100)
  administrador administrador[]
  menu          menu[]
  mesero        mesero[]
  resena        resena[]
  mesa          mesa[]
  orden         orden[]
}

model usuario {
  email         String?         @db.VarChar(255) @unique
  contrasegna   String?         @db.VarChar(255)
  token         String?         @db.VarChar(255)
  rol           String?         @db.VarChar(255)
  idusuario     Int             @id @default(autoincrement())
  confirmado    Boolean
  nombre        String          @db.Char(100)
  apatermo      String?         @db.Char(100)
  amaterno      String?         @db.Char(100)
  estado        String?         @db.VarChar(100)
  calle         String?         @db.VarChar(100)
  numero        Int?
  cp            Int?
  municipio     String?         @db.VarChar(100)
  administrador administrador[]
  cliente       cliente[]
  mesero        mesero[]
  repartidor    repartidor[]
}

//classificacion
//idcliente tiene que ser unique
model resena {
  idresena       Int         @id @default(autoincrement())
  idrestaurante  Int
  idcliente      Int         @unique
  classificacion Int
  date           DateTime    @db.Date
  texto          String      @db.VarChar(255)
  restaurante    restaurante @relation(fields: [idrestaurante], references: [idrestaurante], onDelete: NoAction, onUpdate: NoAction, map: "fk_resena2")
  cliente        cliente     @relation(fields: [idcliente], references: [idcliente], onDelete: NoAction, onUpdate: NoAction, map: "fk_resena3")
}


model mesa {
  idmesa        Int         @id @default(autoincrement())
  idrestaurante Int
  ocupada       Boolean
  restaurante   restaurante @relation(fields: [idrestaurante], references: [idrestaurante], onDelete: Cascade, onUpdate: Cascade, map: "fk_mesa")
  orden         orden[]
}
