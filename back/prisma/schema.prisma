generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum estadoorden {
  RECIBIDA
  EN_PROCESO
  EN_CAMINO
  ENTREGADA
}

//"idrestaurante" es uno-uno porque se quitó "registrorestaurante"
model administrador {
  idadmin             Int                   @id @default(autoincrement())
  idrestaurante       Int
  nombre              String                @db.Char(100)
  apatermo            String?               @db.Char(100)
  amaterno            String?               @db.Char(100)
  idusuario           Int
  restaurante         restaurante           @relation(fields: [idrestaurante], references: [idrestaurante], onDelete: Cascade, map: "fk_admin")
  usuario             usuario               @relation(fields: [idusuario], references: [idusuario], onDelete: Cascade, map: "fk_usuario")
  cocinero            cocinero[]
  mesero              mesero[]
  registrorestaurante registrorestaurante[]
}
// Juntar atributos en usuario
model cliente {
  idcliente        Int                @id @default(autoincrement())
  nombre           String             @db.Char(100)
  apatermo         String?            @db.Char(100)
  amaterno         String?            @db.Char(100)
  estado           String?            @db.VarChar(100)
  calle            String?            @db.VarChar(100)
  numero           Int?
  cp               Int?
  municipio        String?            @db.VarChar(100)
  idusuario        Int
  usuario          usuario?           @relation(fields: [idusuario], references: [idusuario], onDelete: Cascade, map: "fk_usuario")
  modificarCarrito modificarCarrito[]
  carrito          carrito[]
  resena           resena[]
}

//Quitar (y de otras tablas)
model cocinero {
  idcocinero    Int             @id @default(autoincrement())
  idadmin       Int
  idrestaurante Int
  nombre        String          @db.Char(100)
  apaterno      String?         @db.Char(100)
  amaterno      String?         @db.Char(100)
  idusuario     Int
  administrador administrador   @relation(fields: [idadmin], references: [idadmin], onDelete: Cascade, map: "fk_cocinero1")
  restaurante   restaurante     @relation(fields: [idrestaurante], references: [idrestaurante], onDelete: Cascade, map: "fk_cocinero2")
  usuario       usuario         @relation(fields: [idusuario], references: [idusuario], onDelete: Cascade, map: "fk_usuario")
  prepararorden prepararorden[]
}

//Verificar modificaciones sobre ordennormal y ordenenvio
model contenidoorden {
  idcontenidoorden Int          @id @default(autoincrement())
  idordennormal    Int?
  idordenenvio     Int?
  idplatillo       Int?
  ordenenvio       ordenenvio?  @relation(fields: [idordenenvio], references: [idordenenvio], onDelete: Cascade, map: "fk_contenido2")
  ordennormal      ordennormal? @relation(fields: [idordennormal], references: [idordennormal], onDelete: Cascade, map: "fk_contenido1")
  platillo         platillo?    @relation(fields: [idplatillo], references: [idplatillo], onDelete: Cascade, map: "fk_contenido3")
}

//Quitar "estado" (lo tendrá orden)
//Verificar modificaciones sobre ordennormal y ordenenvio
model entregadomicilio {
  identregadomicilio Int        @id @default(autoincrement())
  idrepartidor       Int
  idordenenvio       Int
  estado             String     @db.Char(18)
  ordenenvio         ordenenvio @relation(fields: [idordenenvio], references: [idordenenvio], onDelete: Cascade, map: "fk_or2")
  repartidor         repartidor @relation(fields: [idrepartidor], references: [idrepartidor], onDelete: Cascade, map: "fk_or1")
}

// Quitar completamente
model entregamesa {
  identregamesa Int         @id @default(autoincrement())
  idmesero      Int
  idordennormal Int
  estado        String      @db.Char(18)
  mesero        mesero      @relation(fields: [idmesero], references: [idmesero], onDelete: Cascade, map: "fk_em1")
  ordennormal   ordennormal @relation(fields: [idordennormal], references: [idordennormal], onDelete: Cascade, map: "fk_em2")
}

model menu {
  idmenu        Int         @id @default(autoincrement())
  idrestaurante Int
  restaurante   restaurante @relation(fields: [idrestaurante], references: [idrestaurante], onDelete: Cascade, map: "fk_menu1")
  platillo      platillo[]
}

model mesero {
  idmesero      Int           @id @default(autoincrement())
  idadmin       Int
  idrestaurante Int
  nombre        String        @db.Char(100)
  apatermo      String?       @db.Char(100)
  amaterno      String?       @db.Char(100)
  idusuario     Int
  administrador administrador @relation(fields: [idadmin], references: [idadmin], onDelete: Cascade, map: "fk_mesero1")
  restaurante   restaurante   @relation(fields: [idrestaurante], references: [idrestaurante], onDelete: Cascade, map: "fk_mesero2")
  usuario       usuario       @relation(fields: [idusuario], references: [idusuario], onDelete: Cascade, map: "fk_usuario")
  entregamesa   entregamesa[]
}

//Quitar
model ordenenvio {
  idordenenvio     Int                   @id @default(autoincrement())
  costo            Int
  contenidoorden   contenidoorden[]
  entregadomicilio entregadomicilio[]
  prepararorden    prepararorden[]
  confcarrito      confirmacionCarrito[]
}

//relacion cliente carrito
//Quitar
model modificarCarrito {
  idcliente Int     @unique
  idcarrito BigInt  @unique
  cliente   cliente @relation(fields: [idcliente], references: [idcliente])
  carrito   carrito @relation(fields: [idcarrito], references: [idcarrito])
}

//carritos
//Quitar
model carrito {
  idcarrito        BigInt                @id @default(autoincrement())
  costo            Int
  cliente          cliente[]
  modificarCarrito modificarCarrito[]
  contenido        contenidoCarrito[]
  confcarrito      confirmacionCarrito[]
}

//contenido del carrito del usuario
//Quitar
model contenidoCarrito {
  idcarrito          BigInt
  idplatillo         Int
  idcontenidocarrito BigInt   @id @default(autoincrement())
  carrito            carrito  @relation(fields: [idcarrito], references: [idcarrito])
  platillo           platillo @relation(fields: [idplatillo], references: [idplatillo])
}

//relaciona carrito con las ordenes
//Quitar
model confirmacionCarrito {
  idcarrito     BigInt       @unique
  idordenenvio  Int
  idordennormal Int
  metodopago    String       @db.Char(18)
  carrito       carrito      @relation(fields: [idcarrito], references: [idcarrito])
  ordenenvio    ordenenvio?  @relation(fields: [idordenenvio], references: [idordenenvio], onDelete: Cascade, map: "fk_cc")
  ordennormal   ordennormal? @relation(fields: [idordennormal], references: [idordennormal], onDelete: Cascade, map: "fk_cc2")
}

//Quitar (juntar en Orden)
model ordennormal {
  idordennormal  Int                   @id @default(autoincrement())
  costo          Int
  estado         estadoorden
  contenidoorden contenidoorden[]
  entregamesa    entregamesa[]
  prepararorden  prepararorden[]
  confcarrito    confirmacionCarrito[]
}


// agregar compo
// img Sting varchar(1000)
model platillo {
  idplatillo       Int                @id @default(autoincrement())
  idmenu           Int
  idrestaurante    Int
  nombre           String             @db.VarChar(100)
  costo            Int
  menu             menu               @relation(fields: [idmenu], references: [idmenu], onDelete: Cascade, map: "fk_paltillo1")
  contenidoorden   contenidoorden[]
  contenidocarrito contenidoCarrito[]
}

//Quitar
model prepararorden {
  idpreparaorden Int          @id @default(autoincrement())
  idcocinero     Int
  idordenenvio   Int
  idordennormal  Int
  cocinero       cocinero     @relation(fields: [idcocinero], references: [idcocinero], onDelete: Cascade, map: "fk_po1")
  ordenenvio     ordenenvio?  @relation(fields: [idordenenvio], references: [idordenenvio], onDelete: Cascade, map: "fk_po2")
  ordennormal    ordennormal? @relation(fields: [idordennormal], references: [idordennormal], onDelete: Cascade, map: "fk_po3")
}

//Quitar
model registrorestaurante {
  idregistrorestaurante Int           @id @default(autoincrement())
  idadmin               Int
  idrestaurante         Int
  fecha                 DateTime      @db.Date
  administrador         administrador @relation(fields: [idadmin], references: [idadmin], onDelete: Cascade, map: "fk_reg1")
  restaurante           restaurante   @relation(fields: [idrestaurante], references: [idrestaurante], onDelete: Cascade, map: "fk_reg2")
}

model repartidor {
  idrepartidor     Int                @id @default(autoincrement())
  nombre           String             @db.Char(100)
  apatermo         String?            @db.Char(100)
  amaterno         String?            @db.Char(100)
  idusuario        Int?
  usuario          usuario?           @relation(fields: [idusuario], references: [idusuario], onDelete: Cascade, map: "fk_usuario")
  entregadomicilio entregadomicilio[]
}

//Quitar "cocinero" de aquí
model restaurante {
  idrestaurante       Int                   @id @default(autoincrement())
  nombre              String?               @db.VarChar(100)
  estado              String?               @db.VarChar(100)
  calle               String?               @db.VarChar(100)
  numero              Int?
  cp                  Int?
  municipio           String?               @db.VarChar(100)
  administrador       administrador[]
  cocinero            cocinero[]
  inventario          inventario[]
  menu                menu[]
  mesero              mesero[]
  registrorestaurante registrorestaurante[]
  resena              resena[]
}

//Quitar
model inventario {
  idinventario  Int         @id @default(autoincrement())
  nombre        String      @db.Char(100)
  cantidad      Int
  idrestaurante Int
  restaurante   restaurante @relation(fields: [idrestaurante], references: [idrestaurante], onDelete: NoAction, onUpdate: NoAction, map: "fk_inventario")
}

//Juntar atributos de los usuarios aquí
//Checar typos (apatermo)
// confirmado bool
model usuario {
  email         String?         @db.VarChar(255)
  contrasegna   String?         @db.VarChar(255)
  token         String?         @db.VarChar(255)
  rol           String?         @db.VarChar(255)
  idusuario     Int             @id @default(autoincrement())
  administrador administrador[]
  cliente       cliente[]
  cocinero      cocinero[]
  mesero        mesero[]
  repartidor    repartidor[]
}

//classificacion
//idcliente tiene que ser unique
model resena {
  idresena       Int         @id @default(autoincrement())
  idrestaurante  Int
  idcliente      Int         @unique
  classificacion Int
  date           DateTime    @db.Date
  texto          String      @db.VarChar(255)
  restaurante    restaurante @relation(fields: [idrestaurante], references: [idrestaurante], onDelete: NoAction, onUpdate: NoAction, map: "fk_resena2")
  cliente        cliente     @relation(fields: [idcliente], references: [idcliente], onDelete: NoAction, onUpdate: NoAction, map: "fk_resena3")
}

//agregar  mesa 
//idmesa PK
//idrestarurante FK
//ocupado bool
